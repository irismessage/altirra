<?xml version='1.0' standalone='yes'?>
<?xml-stylesheet type="text/xsl" href="index.xsl" ?>
<topic title="Options">
  <p>
    Altirra has a number of options that can be used to customize the emulated Atari hardware.
  </p>
  <toc/>
  <h2>View</h2>
  <h3>Filter Mode</h3>
  <p>
    Selects the interpolation mode for the display. Point gives the sharpest display, but can give artifacts depending on the
    scaling factor. Bilinear generates a smoother display. Bicubic generates an even higher quality display, but can be slow on
    some video cards.
  </p>
  <p>
    Filter modes are not available unless a Direct3D 9 video card is available; if Altirra is running in DirectDraw or GDI mode,
    filtering is controlled by the OS or video card driver.
  </p>
  <h3>Stretch Mode</h3>
  <p>
    Controls how the display is stretched to fit the screen. Fit to Window just stretches, regardless of how it distorts; Preserve
    Aspect Ratio attempts to match the aspect ratio that would be seen on a properly adjusted TV set. Square Pixels always assumes
    square pixels instead, which is mostly the same for PAL, but noticeably different for NTSC. Integral Square Pixels is similar,
    but also ensures that the scaling factor is always an integer, which prevents distortion in Point filter mode.
  </p>
  <h3>Overscan Mode</h3>
  <p>
    Selects how much of the display is visible. Normal only shows the maximum visible playfield region; Extended shows additional
    border regions that are visible on some TV sets. Full expands the display to cover the entire video signal, even horizontal
    and vertical blank regions.
  </p>
  <p>
    The Extended PAL Height option enables viewing of additional scan lines above and below the normal picture area. This is only
    useful when running software that explicitly uses a special trick to display more than the 240 scan lines normally allowed
    by ANTIC.
  </p>
  <h3>Vertical Sync</h3>
  <p>Lock the display to the vertical sync period, thus reducing the amount of tearing seen on screen.</p>
  <h3>Show FPS</h3>
  <p>
    Display the current emulator performance in frames per second in the window caption. This can introduce occasional glitching
    into the video output.
  </p>
  <h2>Hardware options</h2>
  <h3>800</h3>
  <p>Enables the base Atari 800 hardware.</p>
  <h3>800XL</h3>
  <p>Enables Atari 800XL/130XE hardware features.</p>
  <h2>Firmware options</h2>
  <h3>Default</h3>
  <p>
    Chooses either the OS-B ROM for 800 hardware or the XL ROM for 800XL hardware if available; otherwise, defaults to the built-in
    HLE kernel.
  </p>
  <h3>800 (OS-A)</h3>
  <p>Selects the OS-A version of the Atari 800 firmware. You must have ATARIOSA.ROM for this to work.</p>
  <h3>800 (OS-B)</h3>
  <p>Selects the OS-B version of the Atari 800 firmware. You must have ATARIOSB.ROM for this to work.</p>
  <h3>600XL/800XL</h3>
  <p>Selects the Atari 800XL firmware. You must have ATARIXL.ROM for this to work.</p>
  <h3>Other OS</h3>
  <p>Loads OTHEROS.ROM as firmware, if present. This firmware must be for the XL series (16K).</p>
  <h3>HLE Kernel</h3>
  <p>
    Selects the internal high level emulation (HLE) kernel, which executes kernel calls in native code. No firmware is required.
    This is the next best mode to use when no real kernel ROM is available.
  </p>
  <h3>LLE Kernel</h3>
  <p>
    Selects the internal low level emulation (LLE) kernel, which is a replacement kernel in pure 6502 code. No firmware is required.
    This mode is partially complete and will boot some software. Enabling the disk SIO patch is recommended.
  </p>
  <h2>Memory size options</h2>
  <h3>48K</h3>
  <p>Standard Atari 800 configuration with RAM from 0000-BFFF. The range from C000-CFFF is unconnected.</p>
  <h3>52K</h3>
  <p>Extended Atari 800 configuration with RAM from 0000-CFFF.</p>
  <h3>64K (XL)</h3>
  <p>Standard Atari 800XL configuration with RAM from 0000-FFFF, with the upper 14K swappable with Kernel ROM via PORTB.</p>
  <h3>128K (130XE)</h3>
  <p>
    Atari 130XE configuration with main ROM from 0000-FFFF and external RAM bank switched via a window at 4000-7FFF. This mode
    supports ANTIC bank switching.
  </p>
  <h3>320K</h3>
  <p>Extended Atari 800/800XL configuration with an additional 12 banks of memory. This mode supports ANTIC bank switching.</p>
  <h3>576K</h3>
  <p>
    Extended Atari 800/800XL configuration with an additional 28 banks of memory. This mode does not support either ANTIC bank
    switching or enabling BASIC.
  </p>
  <h3>1088K</h3>
  <p>
    Extended Atari 800/800XL configuration with an additional 60 banks of memory. In addition to disabling ANTIC banking and BASIC,
    this mode also takes an additional bit in PORTB.
  </p>
  <h2>Video options</h2>
  <h3>PAL</h3>
  <p>
    Selects PAL ANTIC/GTIA operation, including aspect ratio and a 50Hz refresh rate. This is recommended for demos since many
    are written in Europe.
  </p>
  <h3>Frame blending</h3>
  <p>
    Averages adjacent frames together to reduce flickering with programs that use alternating frames to multiplex sprites or increase
    apparent frame buffer depth.
  </p>
  <h3>Interlace</h3>
  <p>
    Enables display of interlaced fields (480 scan lines) instead of the standard 240 scan lines. This is only useful when running
    software that supports interlaced display.
  </p>
  <h3>VBXE</h3>
  <p>
    Enables Video Board XE (VBXE) emulation. This is an internally installed module with 512K of VRAM and a custom FPGA core that
    greatly expands the video capabilities of the 8-bit Atari. The FX 1.20 core is emulated.
  </p>
  <h3>Use VBXE memory for expansion</h3>
  <p>
    When VBXE emulation is also enabled, this option causes extended memory mapped through the PIA (most expansion modes) to overlap
    memory used by VBXE. This matches the extended memory emulation done by the FX1.20r core. If disabled, the memories are separate
    as with the FX1.20a core.
  </p>
  <h3>Use $D7xx for VBXE registers</h3>
  <p>
    Locates the VBXE registers at $D7xx instead of $D6xx. This is sometimes done on actual hardware to avoid conflicts with Parallel
    Bus Interface (PBI) devices.
  </p>
  <h3>NTSC artifacting (standard)</h3>
  <p>
    Enables emulation of false colors from alternating high resolution pixels with NTSC video encoding. This is necessary to see
    colors in some games that use artifacting, such as Choplifter and Pitstop II.
  </p>
  <h3>NTSC artifacting (high)</h3>
  <p>
    Emulates NTSC artifacts by simulating the NTSC decoding process. This produces artifacts that are more realistic. However,
    the picture is also blurrier due to NTSC limitations.
  </p>
  <h3>PAL artifacting</h3>
  <p>
    Enables emulation of false colors from chroma blending in the delay line of a PAL video decoder. This gives more accurate
    color output in programs that alternate color and grayscale lines to increase the effective color depth.
  </p>
  <p>Enhanced text output (hardware intercept):</p>
  <p>
    Replaces the standard emulated video display with a text screen using native Windows fonts. This disables emulation of most
    Atari video features and only supports basic text modes, but produces a higher quality text display.
  </p>
  <h2>Disk options</h2>
  <h3>SIO patch</h3>
  <p>
    Intercepts and accelerates disk I/O calls to the serial input/output (SIO) and disk (DSKIN) routines in the kernel. This tremendously
    speeds up disk access in the emulated programs.
  </p>
  <p>Some demos or protected apps may not be compatible with the SIO patch, however.</p>
  <h3>Burst (standard)</h3>
  <p>
    When enabled, the disk drive sends data across the SIO bus as fast as the program can accept it. This is useful for speeding
    up disk loads for programs that use custom SIO routines. It will, however, cause the foreground task in the Atari to run very
    slowly during the transfer. This mode is compatible with the ROM kernel, Atari DOS, and most programs and games.
  </p>
  <h3>Burst (polled / SDX compatible)</h3>
  <p>
    Uses a burst mode to accelerate disk transfers for programs that drive the SIO bus in a polling loop instead of by interrupts,
    particularly SpartaDOS X.
  </p>
  <h3>Accurate sector timing</h3>
  <p>
    Causes the emulator to simulate rotational delays caused by sector position and seek delays (step and head settling time).
    This results in a slower disk load, but is sometimes necessary to load protected disks.
  </p>
  <p>
    When disabled or when the SIO patch is enabled, Altirra still attempts to track disk rotation for protected disks. This means
    that CPU timing is not preserved, but rotational position is still noted.
  </p>
  <h3>Show sector counter</h3>
  <p>Displays the current sector being read or written instead of the unit number in the on-screen indicator.</p>
  <h2>Cassette options</h2>
  <h3>SIO patch</h3>
  <p>
    Intercepts and accelerates cassette I/O calls to the serial input/output (SIO) routine in the kernel. This greatly speeds
    up cassette loads.
  </p>
  <h3>Auto-boot on startup</h3>
  <p>
    Automatically holds down START during system startup and then hits a key to initiate a cassette tape load. This only works
    with cassette tapes that have a machine language program; BASIC tapes must be loaded via CLOAD at the BASIC prompt instead.
  </p>
  <h3>Load data as audio</h3>
  <p>Converts the data from a .CAS tape image into raw audio data so it plays through the speaker.</p>
  <h2>CPU options</h2>
  <p>
    The first three options should not be used unless you are debugging code in the interactive debugger, as they will slow down
    execution or cause debug breaks in code that may be executing normally.
  </p>
  <h3>Record instruction history</h3>
  <p>Causes the CPU to record a trace record for every instruction executed.</p>
  <h3>Track code paths</h3>
  <p>Enables tracking of all memory where instructions are executed and which instructions are branch or call targets.</p>
  <h3>Stop on BRK instruction</h3>
  <p>Causes the debugger to stop when a breakpoint (BRK) instruction is executed. This often indicates that the Atari has crashed.</p>
  <h3>Enable illegal instructions</h3>
  <p>Allows execution of undocumented NMOS 6502 instructions, which are used by some programs. This only works in 6502C mode.</p>
  <h3>CPU model &gt; 6502C</h3>
  <p>Selects the base NMOS 6502C as the CPU model. This is the CPU type used by all official Atari models.</p>
  <h3>CPU model &gt; 65C02</h3>
  <p>
    Selects the CMOS 65C02 as the CPU model, which contains some extra instructions. This is occasionally used as a homebrew upgrade
    option. It may introduce some compatibility problems with games.
  </p>
  <h3>CPU model &gt; 65C816</h3>
  <p>
    Selects the 16-bit 65C816 as the CPU model, which contains many more instructions and a new 16-bit native mode. This is used
    in some homebrew and commercial accelerators to both increase speed and memory address space.
  </p>
  <p>
    Currently, the 65C816 mode does neither: the CPU still runs at 1.79MHz and there is no memory available outside of bank 0.
    However, this mode can run some extended BIOS and application code that makes use of 65C816 features.
  </p>
  <h2>Audio options</h2>
  <h3>Stereo</h3>
  <p>
    Enables a second POKEY. Addresses in the D2xx range with bit 4 clear address the left channel, and addresses with bit 4 set
    address the right channel. The IRQ and serial facilities of the second POKEY are active but unconnected.
  </p>
  <h3>Non-linear mixing</h3>
  <p>
    Emulates the effective mixing curve of the hardware, which causes the output of two voices to be lower than the sum of their
    volume levels. This is needed for some effects and also causes some compression of the output.
  </p>
  <h2>Misc options</h2>
  <h3>Warp speed</h3>
  <p>Disables the speed limiter and audio sync, and runs the emulator as fast as possible.</p>
  <h3>Pause when inactive</h3>
  <p>
    When set, causes Altirra to pause emulation when its window goes inactive. Use this to prevent the emulated Atari from using
    CPU time when in the background.
  </p>
  <h3>Accelerated floating point</h3>
  <p>
    Intercepts known entry points in the floating point library with native math routines. This accelerates Atari decimal math
    to a large degree, particularly speeding up Atari Basic.
  </p>
  <p>
    The emulated FP library is higher accuracy than the real library due to better rounding and use of native math routines, so
    it will produce slightly different results.
  </p>
  <h3>Printer</h3>
  <p>
    Enables printer emulation. When enabled, any output sent to the OS P: device goes to the printer pane instead, where it can
    be viewed or copied out.
  </p>
  <h3>R-Time 8</h3>
  <p>Enables emulation for the R-Time 8 cartridge, which reflects the real system time.</p>
</topic>