<?xml version='1.0' standalone='yes'?>
<?xml-stylesheet type="text/xsl" href="index.xsl" ?>
<topic title="Introduction">
  <toc/>

  <h2>
    System requirements
  </h2>
  
  <h3>Why does Altirra require a 1GHz processor to emulate a 1.79MHz machine?</h3>
  <p>
    Yeah, that does seem a bit inefficient, doesn't it?
  </p>
  <p>
    Altirra uses a precise but slow way to emulate the Atari hardware: it emulates hardware
    on a per-cycle basis. This is required to properly sequence memory accesses between ANTIC
    and the 6502 CPU. Event queues are used whenever possible to reduce the load, particularly
    with GTIA and POKEY, but there are still patterns of memory writes to hardware registers
    that will force frequent synchronization.
  </p>
  <p>
    In the past, emulators have made some compromises
    like atomically executing 6502 instructions and only firing POKEY interrupts on a scan line basis.
    This was required for good performance on older machines and is still required on some embedded
    platforms, but doing this introduces slight emulation inaccuracies. Altirra deliberately uses slower algorithms in order to do more precise emulation.
  </p>
  <p>
    Further optimizations are always possible, but in general it takes a lot of cycles on a sequential
    CPU to precisely emulate parallel hardware.
  </p>

  <h3>How fast should I expect Altirra to run?</h3>
  <p>
    On a 2.5GHz Core 2 Duo, I get from about 300-950 fps in NTSC (500-1500%) in turbo/warp mode. On a 1.6GHz
    Atom, it's more about 150-300 fps (250-500%).
  </p>
  <p>
    You can generally expect the emulation to run in real-time, so it's more of a question of how fast
    it can run in turbo. After all, load times are probably the least interesting part of the Atari
    experience to emulate.
  </p>

  <h3>Would multiple CPU cores help?</h3>
  <p>
    No. To take advantage of multiple cores, you need to have multiple workloads that are relatively
    decoupled so the cores can work separately. Precision cycle-level emulation is the exact opposite
    case where everything is <i>tightly</i> coupled together.
  </p>
  <p>
    It is possible to offload tasks that aren't in the critical path and aren't visible to programs
    running in emulation, such as the latter parts of audio and video generation. Unfortunately, these
    aren't very time-consuming with the Atari hardware, so there isn't much to offload.
  </p>
  
  <h2>For first timers</h2>
  <h3>What's that beeping sound I hear sometimes when a game is loading?</h3>
  <p>
    That's the Atari disk load sound. Specifically, the serial I/O (SIO) routines in the Atari OS
    normally set up the POKEY chip to play audible tones when reading data from the floppy disk
    drive. You don't often hear it in emulators because either the emulator doesn't emulate it or
    the emulator is accelerating the disk load (SIO patch). If you are hearing it in Altirra, it
    means that the disk load is unaccelerated.
  </p>
  <h3>Okay, what about the grinding sound when I don't have a disk set?</h3>
  <p>
    That's the OS polling for non-disk devices. Just wait a couple of seconds, or enable the "fast boot"
    firmware option.
  </p>

  <h2>Hardware support</h2>
  <h3>Does Altirra support the Atari 2600 or 7800?</h3>
  <p>
    No, these are completely different architectures to the 800/5200 lineage. Fundamentally, the 2600 uses
    a CPU-driven display, while the 800/5200 are primarily playfield DMA driven and the 7800 uses a
    line-buffered renderer.
  </p>
  <p>
    The 5200 SuperSystem did support a 2600 adapter, but it was essentially a 2600 mounted on an
    expansion board that used a video bypass on the 5200.
  </p>
  <h2>Input</h2>
  <h3>How come key presses don't always seem to register in the emulator?</h3>
  <p>
    Sometimes programs periodically check for a key being held down instead of trapping the key
    press interrupt. By default, the keyboard mappings are set up in Altirra so that typing
    a character on the host PC pushes one character into the emulation. This prevents the emulated
    OS from duplicating or dropping keys, even at warp speed. It also allows the emulator to
    queue keys so you can type faster than you could on a real Atari. However, it sometimes means that
    the emulated key presses are too quick for the program to see.
  </p>
  <p>
    Under Input &gt; Keyboard, you can change the keyboard mode from cooked mode to raw mode so
    that the emulation sees the keys being held down.
  </p>
  
  <h3>How come Shift+2 doesn't work like it does on the Atari?</h3>
  <p>
    Altirra maps the keyboard by symbol when possible so that characters you type on the host PC
    match the ones produced in the emulation. You typed an @ (Shift+2 on the host), but the
    Atari has &quot; in that spot instead. The upside is that you don't have to deal with
    having the Break key next to the Backspace key like on the original keyboard.
  </p>
  
  <h3>How do I type Ctrl+Esc and Ctrl+Shift+Esc?</h3>
  <p>
    As you've probably discovered, these are reserved keys in Windows. Use Ctrl+\ and Ctrl+Shift+\
    instead.
  </p>

  <h3>How do I make the arrow keys work?</h3>
  <p>
    If you have an input map enabled that maps the arrow keys to a controller, the emulation won't
    see the arrow keys as such, as they'll be shunted to the controller. There are two ways to fix
    this: either disable the input map, or hold down Alt when pressing the arrow keys to bypass
    the input map.
  </p>
  
  <h2>Display</h2>
  <h3>Why do the colors seem subdued in PAL programs?</h3>
  <p>
    Some PAL programs (demos) make use of screens that have alternating grayscale and color lines to
    simulate higher color depth output. These screens make use of the vertical blurring done by PAL
    TV sets to carry chroma into the grayscale lines. Displaying these screens without that blurring
    effect results in lost saturation, which fortunately can be recovered by enabling PAL artifacting
    in the emulator.
  </p>
  <h3>How come when I run in VBXE mode, palette changes don't take place immediately and I see color mismatches in programs?</h3>
  <p>
    Unlike the regular GTIA, Video Board XE (VBXE) allows the program to modify the 256 color Atari
    palette. Altirra copies its palette into VBXE palette 0 on startup, but afterward it can't update
    it because some colors may have been modified. Mismatches occur when programs only modify part
    of the palette and rely on the exact colors provided in palette 0 (which is a bit risky, since
    they are only ever loaded on cold boot and not on warm reset).
  </p>

  <h3>Why can't I use a palette file (*.pal, *.act)?</h3>
  <p>
    The graphics code requires knowledge of the upstream luma and chroma signals in order to
    properly handle some video output modes, particularly artifacting modes. That is why the
    Adjust Colors dialog exposes the parameters used to generate the palette instead of the
    palette colors themselves.
  </p>

  <h3>Why is PAL mode a little jittery?</h3>
  <p>
    PAL displays use a 50Hz refresh rate, while computer displays often run at 60Hz or higher.
    Displaying PAL video on a 60Hz display results in a tiny jerk 10 times a second (60Hz - 50Hz = 10Hz).
    If you can set your host PC to use a 50Hz display, this effect will mostly go away.
  </p>
  <p>
    The reason it doesn't entirely go away is that the Atari actually produces a video signal that
    deviates a little bit from the standards and has a frame rate that's slightly slower than it
    should be.
  </p>

  <h2>Sound</h2>
  <h3>The sound seems a bit crackly. How do I fix this?</h3>
  <p>
    If your video card is unable to keep up or the CPU is loaded, the sound can break up because the
    emulator can't keep the sound card fed consistently. Increase the latency in System &gt; Audio &gt;
    Options to fix this.
  </p>

  <h3>How do I reduce the delay between inputs and the sound?</h3>
  <p>
    This is the opposite problem of too much latency &#x2014; decrease the latency in System &gt; Audio &gt; Options.
    You can also switch to DirectSound mode, as that usually enables lower latency than waveOut mode,
    particularly on Windows Vista and Windows 7.
  </p>
  
  <h2>Emulation options</h2>
  <h3>Why can't I choose PAL mode when 5200 hardware mode is selected?</h3>
  <p>
    A PAL version of the 5200 SuperSystem was never made. All manufactured consoles were NTSC.
  </p>
  <h3>How come the BASIC option is inverted after I switched to custom OS firmware?</h3>
  <p>
    The official XL/XE OS is set up so that by default it boots with BASIC enabled, and
    you have to hold down OPTION on boot to turn it off. That's annoying, since a lot of
    the good software doesn't use BASIC and needs OPTION held down, so custom OSes frequently
    have this swapped around. Unfortunately, Altirra doesn't know which convention the
    custom OS uses, so you have to flip the option around if the OS works that way.
  </p>

  <h2>Other</h2>
 
  <h3>Can I use a physical Atari disk drive over a serial or USB adapter with Altirra?</h3>
  <p>
    No, this is not currently supported. The best way to use such hardware is to use another
    program to image the entire disk through the drive, then mount that disk image in Altirra.
  </p>
  <p>
    It is possible for an emulator to directly use a disk drive in this manner, but the timing
    is critical enough that it isn't a good idea, at least in Windows. The main reason is that
    while a PC is fast enough to emulate an Atari, it isn't necessarily fast enough to support
    the stable timing and low latency needed to use a live drive during emulation.
  </p>
  <p>
    For instance, the Atari SIO specification states that the computer must negate the command line within
    650-950 microseconds of transmitting the last bit of the command frame, and begin transmission
    of a data frame 1.0-1.8 milliseconds after receiving the last bit of an ACK byte from the peripheral.
    This timing is even more critical if
    a protected disk is being read, as slight timing variations can cause the wrong sector
    to be read and the game to crash.
    In contrast, a single call to Present() to draw a frame on screen can delay the emulator
    by up to 16.7 milliseconds when vsync is enabled.
  </p>
</topic>