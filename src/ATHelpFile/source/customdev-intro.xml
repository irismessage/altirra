<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="index.xsl" ?>
<topic title="About Custom Devices">
  <p>
    A custom device allows the emulator to be extended to support new hardware
    without modifying the emulator itself. It is implemented through a custom
    device host architecture that allows the device to be described solely through
    a device description file and scripting, both of which can be created with
    a text editor.
  </p>
  <p>
    The detailed specification for a custom device is given in the specification
    topic. Below is an overview.
  </p>
  <h2>Device description</h2>
  <p>
    All custom devices have an <tt>.atdevice</tt> file that describes the parts
    of the custom device. This file is a JSON file and can optionally refer to
    other files for scripts or for initialization data. When a custom device is
    added to the device tree, the settings dialog has a path property pointing
    to the custom device description file.
  </p>
  <p>
    The facilities exposed to a custom device are a subset of the internal
    interfaces within the emulator, and the scripting engine is simplified compared
    to what can be implemented directly in C/C++. The custom device, however,
    appears the same to the rest of the emulator as any other internal device.
    The design also reduces the amount of work that must be done by script,
    minimizing performance impact. For instance, a bank switching cartridge need
    only respond to bank switching accesses, with the memory mapping performed
    by the emulator itself.
  </p>
  <h2>Security</h2>
  <p>
    For security reasons, the input and output functionality in a custom device
    is slightly restricted. Any files referenced by the device configuration
    must be local to the <tt>.atdevice</tt> file, and any network connection
    specified will connect only to <tt>localhost</tt>. This prevents arbitrary
    files on disk from being unexpectedly sent over the network connection.
  </p>
  <h2>Hot reload</h2>
  <p>
    The settings dialog for a custom device has an option to enable hot reload
    for the device configuration files. When this is enabled, the <tt>.atdevice</tt>
    file and any associated files it references are monitored for changes, and
    automatically reloaded on a change. This speeds up iteration.
  </p>
  <p>
    When using hot reload, disabling the "pause when inactive" function is
    recommended so the emulator continues to run while the custom device
    configuration is edited in another program. Also, note that the custom
    device will be reset when the reload occurs, so often it is necessary to
    trigger a cold reset after a successful reload.
  </p>
</topic>